003.03-DBMyBatis설정

																								, https://mybatis.org/mybatis-3/ko/index.html

1. pom.xml(MyBatis 관련 라이브러리 추가)
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.6</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.2</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-tx -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		

2. SQLSessionFactory 
	1) SQLSession
	2) SQLSessionFactory (내부에서 SQLSession 을 만드는 존재이고, 개발에서 SQLSession을 통해서 Connection 을 생성하거나 원하는 SQL을 전달하고 결과를 리턴 받는 구조로 작성)
	ps: root-context.xml 에 아래와 같은 형태로 작성 															,/ex00/src/main/webapp/WEB-INF/spring/root-context.xml 
		<!-- HikariCp configuration -->
		<bean id="dataSource_출발" class="com.zaxxer.hikari.HikariDataSource"
			destroy-method="close">
			<constructor-arg ref="hikariConfig" />
		</bean>
		
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dataSource_도착"></property>
		</bean>
		
		class="org.mybatis.spring.SqlSessionFactoryBean" ---> mybatis-spring 라이브러리 클래스 사용(pom.xml)
		
3. JUNIT 테스트		
																									, /ex00/src/test/java/org/zerock/persistence/DataSourceTests.java


4. 스프링과 연동 처리 
	1) 인터페이스 작성 																					, /ex00/src/main/java/org/zerock/mapper/TimeMapper.java
			@Select("SELECT sysdate FROM DUAL")
			public String getTime();
	2) Mapper 설정 
	-탭을 설정:		root-context.xml 에서 Namespces 항목에서 mybatis-spring   							, /ex00/src/main/webapp/WEB-INF/spring/root-context.xml
	-추가: 			<mybatis-spring:scan base-package="org.zerock.mapper"/>
    -테스트 :			
    
    																				, /ex00/src/test/java/org/zerock/persistence/TimeMapperTests.java

5. xml 매퍼와 같이 쓰기				
																					, /ex00/src/main/java/org/zerock/mapper/TimeMapper.java
																					, /ex00/src/main/resources/org/zerock/mapper/TimeMapper.xml 

6. log4jdbc-log4j2 설정 
 	1) 라이브러리 추가 				, /ex00/pom.xml
 			<!-- https://mvnrepository.com/artifact/org.bgee.log4jdbc-log4j2/log4jdbc-log4j2-jdbc4 -->
			<dependency>
				<groupId>org.bgee.log4jdbc-log4j2</groupId>
				<artifactId>log4jdbc-log4j2-jdbc4</artifactId>
				<version>1.16</version>
			</dependency>
	
  	2) 프로퍼티파일설정:  			 ,/ex00/src/main/resources/log4jdbc.log4j2.properties
 		- log4jdbc 를 이용하는 경우는 JDBC 드라이버와 URL 정보를 수정해야 한다. 

  	    - root-context.xml 에서
		<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
			<!--<property name="driverClassName"
				value="oracle.jdbc.driver.OracleDriver"></property>
			<property name="jdbcUrl"
				value="jdbc:oracle:thin:@localhost:1521:XE"></property> -->
			
			<property name="driverClassName"
				value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
			<property name="jdbcUrl"
				value="jdbc:log4jdbc:oracle:thin:@localhost:1521:XE"></property>

	3)log레벨 설정하기 :  , /ex00/src/test/resources/log4j.xml
				<logger name="jdbc.audit">
					<level value="warn"/>
				</logger>
				
				<logger name="jdbc.audit">
					<level value="warn"/>
				</logger>
				
				<logger name="jdbc.resultset">
					<level value="warn"/>
				</logger>
				
				<logger name="jdbc.connection">
					<level value="warn"/>
				</logger>